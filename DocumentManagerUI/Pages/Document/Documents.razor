@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.IO;
@using System.Text.Json;
@using Blazorise.RichTextEdit
@using DocumentManagerUI.ModelResponse
@inject IJSRuntime js

<EditForm Model="@document" OnValidSubmit="@(HandleValidSubmit)">
    <DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary/>
    <div class="col-10 Foorm">
        <label class="form-label">Title</label>
        <input @bind="document.Title" type="text" class="form-control" id="inputAddress" placeholder="Название Документа" />
    </div>

    <div class="col-10 py-2 Foorm">
        <label class="form-label">Content</label>
        <RichTextEdit @ref="richTextEditRef"
                      Theme="RichTextEditTheme.Snow"
                      PlaceHolder="Type your post here..."
                      ReadOnly="@readOnly"
                      SubmitOnEnter="false"
                      EnterPressed="@HandleValidSubmit"
                      ContentChanged="@OnContentChanged"
                      ToolbarPosition="Placement.Top">
            <Editor>
                @foreach (var item in document?.Content)
                {
                    @((MarkupString)item)
                }
                </Editor>
            <Toolbar>
                <RichTextEditToolbarGroup>
                    <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                    <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                    <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                        <RichTextEditToolbarSelectItem Value="small" />
                        <RichTextEditToolbarSelectItem Selected />
                        <RichTextEditToolbarSelectItem Value="large" />
                        <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                    </RichTextEditToolbarSelect>
                    <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                    <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
                </RichTextEditToolbarGroup>
                <RichTextEditToolbarGroup Float="Float.End">
                    <Button Clicked="@OnCreateBlog"><Icon Name="IconName.FileAlt" /></Button>
                </RichTextEditToolbarGroup>
                <!-- Custom toolbar content -->
            </Toolbar>
        </RichTextEdit>
        
    </div>

    <div class="col-10 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">Description</label>
        <div class="col-12 input-group">
            <textarea @bind="document.Description" type="text" class="form-control" aria-label="Подробное описание" placeholder="Подробное описание"></textarea>
        </div>
    </div>
     
    <div class="col-md-5 py-2 Foorm">
        <label class="form-label">CreationTime</label>
        <input @bind="document.CreationTime" type="datetime" disabled="disabled" class="form-control" id="inputCity" />
    </div>

    <div class="col-md-5 py-2 Foorm">
        <label class="form-label">LastUpdate</label>
        <input @bind="document.LastUpdate" type="datetime" disabled="disabled" class="form-control" id="inputZip" />
    </div>

    <div class="col-3 subButtom Foorm">
        <button type="submit" class="btn btn-primary" style="margin-bottom: 20px;">Сохранить</button>
    </div>
</EditForm>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @ErrorMessage
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code
{
    [Parameter]
    public string IdDocument { get; set; }
    [Parameter]
    public string DocumentManagerApi { get; set; }

    public string tmp ="";
    public string ErrorMessage { get; set; }
    public Modal modalRef { get; set; }
    private Document document = new Document();

    private List<string> blogsHtml = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await GetDocumentAsync();
    }

    private async Task GetDocumentAsync()
    {
        string uri = string.Concat($"{DocumentManagerApi}/Documents/", IdDocument);
        try
        {
            var response = await Http.GetAsync(uri);
            var payload = await response.GetPayload();
            if (response.IsSuccessStatusCode)
            {
                document = JsonSerializer.Deserialize<Document>(payload);
            }
            else
            {
                var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(payload);
                throw new Exception(errorResponse.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            await ShowModal(ex.Message);
        }
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private Task ShowModal(string message)
    {
        ErrorMessage = message;
        return modalRef.Show();
    }

    public async Task OnContentChanged()
    {
        try
        {
            var tmp = await richTextEditRef.GetTextAsync();
            if (tmp.Contains("<img"))
            {
                tmp = await richTextEditRef.GetHtmlAsync();
                tmp = tmp.Replace("&lt;", "<");
                tmp = tmp.Replace("&gt;", ">");
                await richTextEditRef.SetHtmlAsync(tmp);
            }


            /*if (!document.Content.Contains(tmpStr))
                {
                document.Content.Add(tmp);

                StateHasChanged();
            }*/
        }
        catch { }
    }

    public async Task OnCreateBlog()
    {
        try
        {
            var selectedText = await js.InvokeAsync<string>("getSelectionHtml");
            var startIndex = selectedText.IndexOf("<img");
            var endIndex = selectedText.IndexOf('>', startIndex);
            var tmpStr = selectedText.Substring(startIndex, endIndex - startIndex + 1);
            var tmpStr2 = selectedText.Replace(tmpStr, "");
            var blogs = $"<figure>{tmpStr}<figcaption><br>{tmpStr2}</figcaption></figure>";
            document.Content.Add(blogs);
        }
        catch (Exception)
        {

        }

    }

    private async Task HandleValidSubmit()
    {
        string uri = string.Concat($"{DocumentManagerApi}/Documents/", IdDocument);
        try
        {
            document.LastUpdate = DateTime.Now;
            var response = await Http.PutAsJsonAsync(uri, document);
            if (response.IsSuccessStatusCode)
            {
                await GetDocumentAsync();
            }
            else
            {
                throw new Exception("500 - Internal Server Error");
            }
        }
        catch (Exception ex)
        {
            await ShowModal(ex.Message);
        }
    }


    protected RichTextEdit richTextEditRef;
    protected bool readOnly = false;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;

}

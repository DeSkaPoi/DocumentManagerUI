@using System.IO
@using System.Net.Http.Headers
@using System.Reflection.Metadata
@using System.Text.Json
@using Microsoft.Extensions.Logging
@inject HttpClient Http


<InputFile id="file" OnChange="@OnInputFileObjectChange" />

<button @onclick="Post" class="btn btn-primary">Сохранить</button>

@foreach (var pict in listPicture)
{
    <a href="@pict.File"><br/>@(pict.Name)</a>
}

@code {
    string imageURL = "";
    private int maxAllowedFiles = 3;

    List<Guid> listId = new();
    List<Popitis> listPicture = new();

    FileInfoResponse fileInfoRess = new FileInfoResponse();
    MultipartFormDataContent content = new MultipartFormDataContent();

    protected override async Task OnInitializedAsync()
    {
        var res = await Http.GetFromJsonAsync<List<FileInfoResponse>>("https://localhost:44339/api/FileManagers");

        foreach (var fileInfo in res)
        {
            listPicture.Add(await GetFileObject(fileInfo.Id));
        }
    }

    private async Task OnInputFileObjectChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 100;
        
        foreach (var file in e.GetMultipleFiles(1))
        {
            using var fileContent = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();
            await fileContent.CopyToAsync(ms);
            
            var byteArray = new ByteArrayContent(ms.ToArray());
            byteArray.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content = new MultipartFormDataContent();
            content.Add(byteArray, "\"file\"", file.Name);
            Console.WriteLine(content);
        }
    }

    private async Task OnInputFileInfoChange()
    {
        Random rnd = new Random();
        fileInfoRess.Title = $"{rnd.Next().ToString()}";

    }

    private async Task Post()
    {
        await OnInputFileInfoChange();
        Console.WriteLine(fileInfoRess + " " + fileInfoRess.Title);
        var statusInfo = await Http.PostAsJsonAsync($"https://localhost:44339/api/FileManagers/", fileInfoRess);
        var filInfoApiStream = statusInfo.Content.ReadAsStream();
        var fileInfoResp = await JsonSerializer.DeserializeAsync<Guid>(filInfoApiStream); 
        Console.WriteLine(fileInfoResp);

        var status = await Http.PostAsync($"https://localhost:44339/api/FileObject/{fileInfoResp}", content);
    }

    private async Task<Popitis> GetFileObject(Guid Id)
    {
        var fileInfo = await Http.GetFromJsonAsync<FileInfoResponse>($"https://localhost:44339/api/FileManagers/{Id}");
        var fileObject = await Http.GetFromJsonAsync<FileObjectResponse>($"https://localhost:44339/api/FileObject/{Id}");
        fileInfo.FileObj = fileObject;
        var imageURL = $"data:{fileInfo.FileObj.FileType};base64,{Convert.ToBase64String(fileInfo.FileObj.File)}";
        var file = new Popitis(imageURL, fileInfo.FileObj.Name);
        return file;
    }
}

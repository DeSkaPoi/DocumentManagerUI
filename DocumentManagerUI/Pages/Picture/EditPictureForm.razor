@using Microsoft.AspNetCore.Components
@using DocumentManagerUI.ModelResponse
@using System.Net
@using System.IO
@using System.Text.Json
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using System.Drawing
@using Color = Blazorise.Color
@inject IJSRuntime jsRuntime


<EditForm Model="@Picture" OnValidSubmit="@PutPictureObject">
    <DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
    <div class="col-12 Foorm">
        <label class="form-label">Title</label>
        <input @bind="Picture.Title" type="text" class="form-control" id="inputAddress" placeholder="Title" />
    </div>

    <div class="col-12 py-2 Foorm">
        <label class="form-label">Format</label>
        <input @bind="Picture.Format" type="text" class="form-control" id="inputAddress2" placeholder="Format" />
    </div>
    
    <div class="col-12 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">Description</label>
        <div class="col-12 input-group">
            <textarea @bind="Picture.Description" type="text" class="form-control" aria-label="Description" placeholder="Description"></textarea>
        </div>
    </div>
     
    <div class="col-12 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">ResolutionX</label>
        <div class="col-12 input-group">
            <input @bind="Picture.ResolutionX" type="text" class="form-control" aria-label="ContentType" placeholder="ResolutionX"></input>
        </div>
    </div>
    
    <div class="col-12 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">ResolutionY</label>
        <div class="col-12 input-group">
            <input @bind="Picture.ResolutionY" type="text" class="form-control" aria-label="Content" placeholder="ResolutionY"></input>
        </div>
    </div>
    
    <div class="col-md-6 py-2 Foorm">
        <label class="form-label">CreationTime</label>
        <input @bind="Picture.CreationTime" type="datetime" disabled="disabled" class="form-control" id="inputCity" />
    </div>
    
    <div class="col-md-6 py-2 Foorm1">
        <label class="form-label">LastUpdate</label>
        <input @bind="Picture.LastUpDate" type="datetime" disabled="disabled" class="form-control" id="inputZip" />
    </div>
    
    <div class="col-12 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">Size</label>
        <div class="col-12 input-group">
            <input @bind="Picture.Size" disabled="disabled" type="text" class="form-control" aria-label="Size" placeholder="Size"></input>
        </div>
    </div>
    
    @if (param == 1)
    {
        <div id="Bu" class="col-md-12 Foorm m-t-10 m-l-10">
            <div class="col-md-3 Foorm">
                <a download="@(Href("n") )" href="@(Href("h"))" type="button" class="btn btn-outline-dark">Dowanload</a>
            </div>
            <div class="col-md-5 Foorm">
                <button type="button" @onclick:preventDefault="true" @onclick:stopPropagation="true" @onclick="@(() => { param = 2; })" class="btn btn-outline-dark">Overwrite file</button>
            </div>
        </div>
    }
    else if(param == 2)
    {
        <div id="Bu" class="col-md-12 py-2 Foorm m-b m-t-10">
            <InputFile OnChange="@OnChange"/>
            <div class="m-t-10">
                <button @onclick:preventDefault="true" @onclick:stopPropagation="true" @onclick="@(() => { param = 1; })" type="submit" class="btn btn-outline-danger">Cancel</button>
            </div>
        </div>
    }

    <div class="subButtom Foorm py-2 marginSave" >
        <Button id="12" Type="ButtonType.Submit" Color="Color.Dark" Loading="isLoading">
            <LoadingTemplate>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Saving...
            </LoadingTemplate>
            <ChildContent>
                Save
            </ChildContent>
        </Button>
    </div>
</EditForm>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @ErrorMessage
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {

    [Parameter]
    public PictureResponse Picture { get; set; }

    public PictureObjectResponse fileTmp = new PictureObjectResponse();
    string size;
    public Modal modalRef { get; set; }

    string ErrorMessage = "";
    enum Size
    {
        KB = 1,
        Mb,
        Gb
    }

    bool tmp = false;
    bool isLoading = false;
    int param = 1;

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private Task ShowModal(string message)
    {
        ErrorMessage = message;
        return modalRef.Show();
    }

    public string Href(string s)
    {
        try
        {
            if (Picture.PictureObject == null)
            {
                //GetFileObject();
                Console.WriteLine(this);
                return "";
            }
            else if(s == "h")
            {
                return $"data:{Picture.PictureObject.PictureTypeMime};base64,{Convert.ToBase64String(Picture.PictureObject.Picture)}";
            }
            else
            {
                return Picture.PictureObject.Name;
            }
        }
        catch (Exception e)
        {
            ShowModal(e.Message);
            return "";
        }
    }

    protected async Task OnChange(InputFileChangeEventArgs e)
    {
        try
        {
            long maxFileSize = 1024 * 1024 * 100;

            foreach (var file in e.GetMultipleFiles(3))
            {
                
                    using (var stream = new MemoryStream())
                    {
                        var content = file.OpenReadStream(10240000);
                        await content.CopyToAsync(stream);
                        stream.Seek(0, SeekOrigin.Begin);
                        Picture.Size = ConvertingValueFromBytes(file.Size, 0);

                        Picture.PictureObject = new PictureObjectResponse(file.Name, stream.ToArray(), file.ContentType, null);

                        if (Picture.PictureObject == null)
                        {
                            throw new Exception("Mutable object not found");
                        }
                    }
                
    /*size = ConvertingValueFromBytes(file.Size, 0);
                using var fileContent = file.OpenReadStream(maxFileSize);
                using var ms = new MemoryStream();
                await fileContent.CopyToAsync(ms);

           
                fileTmp = new FileObjectResponse(file.Name, ms.ToArray(), file.Type);

                if (File.FileObject == null)
                {
                    throw new Exception("Mutable object not found");
                }*/
            }
        }
        catch (Exception ex)
        {
            ShowModal(ex.Message); 
        }
    }

    private async Task PutPictureObject()
    {
        try
        {
            isLoading = true;
            Picture.LastUpDate = DateTime.Now;

            fileTmp = Picture.PictureObject;

            var statusInfo2 = await Http.PutAsJsonAsync($"https://localhost:44318/api/PicturePayload/picture/{Picture.Id}", fileTmp);
            if (!statusInfo2.IsSuccessStatusCode)
            {
                await Http.DeleteAsync($"https://localhost:44318/api/PictureDescription/{Picture.Id}");
                throw new Exception("Error - 500. Internal Server Error - Put");
            }
            param = 1;
            Picture.Size = size;
            var statusInfo1 = await Http.PutAsJsonAsync($"https://localhost:44318/api/PictureDescription/{Picture.Id}", Picture);
            if (!statusInfo1.IsSuccessStatusCode)
            {
                throw new Exception("Error - 500. Internal Server Error - Put");
            }

            
            Picture.PictureObject = fileTmp;
            await Task.Delay(1000);
            isLoading = false;
        }
        catch (Exception e)
        {
            ShowModal(e.Message);
        }
        
    }

    string ConvertingValueFromBytes(double size, int i)
    {
        if (size / 1024 > 1)
        {
            return ConvertingValueFromBytes(size / 1024, ++i);
        }
        else
        {
            return $"{Math.Round(size, 2)} {(Size)i}";
        }
    }
}

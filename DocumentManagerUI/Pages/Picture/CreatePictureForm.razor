@using Microsoft.AspNetCore.Components
@using DocumentManagerUI.ModelResponse
@using System.Net
@using System.IO
@using System.Text.Json
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime jsRuntime
@using System.Drawing


<EditForm Model="@Picture" OnValidSubmit="@PostPictureObject">
    <DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
    <div class="col-12 Foorm">
        <label class="form-label">Title</label>
        <input @bind="Picture.Title" type="text" class="form-control" id="inputAddress" placeholder="Title" />
    </div>

    <div class="col-12 py-2 Foorm">
        <label class="form-label">Format</label>
        <input @bind="Picture.Format" type="text" class="form-control" id="inputAddress2" placeholder="Format" />
    </div>
    
    <div class="col-12 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">Size</label>
        <div class="col-12 input-group">
            <input @bind="Picture.Size" type="text" class="form-control" aria-label="KeyWords" placeholder="Size"></input>
        </div>
    </div>

    <div class="col-12 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">ResolutionX</label>
        <div class="col-12 input-group">
            <textarea @bind="Picture.ResolutionX" type="text" class="form-control" aria-label="Description" placeholder="ResolutionX"></textarea>
        </div>
    </div>
     
    <div class="col-12 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">ResolutionY</label>
        <div class="col-12 input-group">
            <input @bind="Picture.ResolutionY" type="text" class="form-control" aria-label="ContentType" placeholder="ResolutionY"></input>
        </div>
    </div>
    
    <div class="col-12 py-2 px-0 py-0 Foorm">
        <label class="form-label col-12">Description</label>
        <div class="col-12 input-group">
            <input @bind="Picture.Description" type="text" class="form-control" aria-label="Content" placeholder="Description"></input>
        </div>
    </div>
    
    <div class="col-md-6 py-2 Foorm">
        <label class="form-label">CreationTime</label>
        <input @bind="Picture.CreationTime" type="datetime" disabled="disabled" class="form-control" id="inputCity" />
    </div>
    
    <div class="col-md-6 py-2 Foorm1">
        <label class="form-label">LastUpdate</label>
        <input @bind="Picture.LastUpDate" type="datetime" disabled="disabled" class="form-control" id="inputZip" />
    </div>
    
    <div id="Butr" class="col-md-12 py-2 Foorm m-b m-t-10">
        <InputFile OnChange="@OnChanges" />
    </div>

    <div class="subButtom Foorm py-2 marginSave">
        <Button id="12" Type="ButtonType.Submit" Color="Blazorise.Color.Dark" Loading="isLoading">
            <LoadingTemplate>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Saving...
            </LoadingTemplate>
            <ChildContent>
                Save
            </ChildContent>
        </Button>
    </div>
</EditForm>


<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @ErrorMessage
        </ModalBody>
        <ModalFooter>
            <Button Color="Blazorise.Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>



@code {

    [Parameter]
    public string IdDocument { get; set; }

    [Parameter]
    public PictureResponse Picture { get; set; }
    
    public Modal modalRef { get; set; }

    bool isLoading = false;
    string ErrorMessage = "";

    enum Size
    {
        KB = 1,
        Mb,
        Gb
    }

  

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private Task ShowModal(string message)
    {
        ErrorMessage = message;
        return modalRef.Show();
    }

    private async Task OnChanges(InputFileChangeEventArgs e)
    {
        try
        {
            long maxFileSize = 1024 * 1024 * 100;

            foreach (var file in e.GetMultipleFiles(1))
            {
                using (var stream = new MemoryStream())
                {
                    var content = file.OpenReadStream(10240000);
                    await content.CopyToAsync(stream);
                    stream.Seek(0, SeekOrigin.Begin);

                    Picture.Size = ConvertingValueFromBytes(file.Size, 0);
                    Picture.PictureObject = new PictureObjectResponse(file.Name, stream.ToArray(), file.ContentType);

                    if (Picture.PictureObject == null)
                    {
                        throw new Exception("Mutable object not found");
                    }
                }
                

                
                /*using var fileContent = file.OpenReadStream(maxFileSize);
                using var ms = new MemoryStream();
                await fileContent.CopyToAsync(ms);*/

           
                
            }
        }
        catch (Exception ex)
        {
            ShowModal(ex.Message + "ssssss");
        }
        
    }

    private async Task PostPictureObject()
    {
        try
        {
            Picture.CreationTime = DateTime.Now;
            Picture.LastUpDate = DateTime.Now;
            var response = await Http.PostAsJsonAsync($"https://localhost:44318/api/PictureDescription/", Picture);

            if (!response.IsSuccessStatusCode)
            {
                throw new Exception("Error - 500. Internal Server Error - Post");
            }

            var idfile = await response.Content.ReadAsStringAsync();
            idfile = idfile.Trim('"');
            var statusInfo = await Http.PostAsJsonAsync($"https://localhost:44318/api/PicturePayload/picture/{idfile}", Picture.PictureObject);
            if (!statusInfo.IsSuccessStatusCode)
            {
                await Http.DeleteAsync($"https://localhost:44318/api/FileDescription/{idfile}");
                throw new Exception("Error - 500. Internal Server Error - Post");
            }

            var response2 = await Http.PostAsJsonAsync($"https://localhost:5001/api/DocumentPictures/{IdDocument}/{idfile}", new object());
            if (!response2.IsSuccessStatusCode)
            {
                throw new Exception("Error - 500. Internal Server Error - Post");
            }

        }
        catch (Exception e)
        {
            ShowModal(e.Message + "wwww");
        }
        
    }

    string ConvertingValueFromBytes(double size, int i)
    {
        if (size / 1024 > 1)
        {
            return ConvertingValueFromBytes(size / 1024, ++i);
        }
        else
        {
            return $"{Math.Round(size, 2)} {(Size)i}";
        }
    }

}

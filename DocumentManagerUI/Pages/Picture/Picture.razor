@using System.IO
@using System.Text.Json
@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using DocumentManagerUI.ModelResponse
@using global::Picture.Infrastructure.DBModel
@using Microsoft.JSInterop


<div class="col-12 dp-ib">
    <div class="offset-md-10 py-2">
        <button @onclick="@(() => { ShowModal(new PictureResponse());})" type="button" class="btn btn-outline-dark">
            <div class="plus-square-fill.svg">
                <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" fill="currentColor" class="bi bi-plus-lg" viewBox="0 1 16 16">
                    <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"/>
                </svg>
                Create
            </div>
        </button>
    </div>
</div>


<div id="main-content" class="file_manager">
    <div class="container">
        <div class="row clearfix">

            @foreach (var file in fileList)
            {
                <div class="col-2-5">
                    <div class="file">
                        <a @onclick="@(() => { ShowChangeModal(file);})" type="button" class="btn btn-r btn-light">
                            <div class="hover">
                                <buuttom @onclick:stopPropagation="true" @onclick="@(() => { ShowModalDel(file); })" class="btn btn-sm btn-icon btn-outline-danger">

                                    <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                        <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z" />
                                    </svg>

                                </buuttom>
                            </div>
                            <div >
                                

                                <img class="fit-picture" src="@scaleImage.Find(si => si.Id == file.Id).ScaleImage">

                            </div>
                            <div class="file-name">
                                <p class="m-b-5 text-muted name-file">@file.Title</p>
                            </div>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<Modal @ref="modalChangeRef" Closed="HideChangeModal">
    <ModalContent Centered Scrollable="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Edit File</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <EditPictureForm Picture="file"></EditPictureForm>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="modalCreateRef" Closed="HideModal">
    <ModalContent Centered Scrollable="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Create File</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <CreatePictureForm Picture="file" IdDocument="@IdDocument"></CreatePictureForm>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="modalDelRef" Closed="HideModalDel">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Are you sure?</ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalFooter>
            <Button Color="Color.Danger" Clicked="@(() => {  return DeleteFile(); })">Yes, delete</Button>
            <Button Color="Color.Secondary" Clicked="@HideModalDel">No, leave the file </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    [Parameter]
    public string IdDocument { get; set; }

    string fileUrl = "";
    private int maxAllowedFiles = 3;

    List<PictureResponse> fileList = new();
    List<ScaleImageResponse> scaleImage= new();
    FileListResponse payloadFileList = new FileListResponse();

    PictureResponse file = new PictureResponse();
    PictureObjectResponse payloadFile = new();
    
    MultipartFormDataContent content = new MultipartFormDataContent();
    public Modal modalCreateRef { get; set; }
    public Modal modalChangeRef { get; set; }
    public Modal modalDelRef { get; set; }

    protected override async Task OnInitializedAsync()
    {
            if (fileList == null)
            {
                fileList = new();
            }
            var doc = await Http.GetFromJsonAsync<Document>($"https://localhost:5001/api/DocumentPictures/{IdDocument}");
            fileList.Clear();
            foreach (var file in doc.Pictures)
            {
                var fileOb = await Http.GetFromJsonAsync<PictureResponse>($"https://localhost:44318/api/PictureDescription/{file.PictureId}");
                fileList.Add(fileOb);
            }
            scaleImage = await Http.GetFromJsonAsync<List<ScaleImageResponse>>($"https://localhost:44318/api/PicturePayload/scale");
            int k = 0;
    }

    private async Task HideModal()
    {
        await modalCreateRef.Hide();
        var doc = await Http.GetFromJsonAsync<Document>($"https://localhost:5001/api/DocumentPictures/{IdDocument}");
        fileList.Clear();
        foreach (var file in doc.Files)
        {
            var fileOb = await Http.GetFromJsonAsync<PictureResponse>($"https://localhost:44318/api/PictureDescription/{file.FileId}");
            fileList.Add(fileOb);
        }

        StateHasChanged();
    }

    private async Task ShowModal(PictureResponse file)
    {
        this.file = file;
        await modalCreateRef.Show();
    }

    private async Task HideChangeModal()
    {
        await modalChangeRef.Hide();
        var doc = await Http.GetFromJsonAsync<Document>($"https://localhost:5001/api/DocumentPictures/{IdDocument}");
        fileList.Clear();
        foreach (var file in doc.Pictures)
        {
            var fileOb = await Http.GetFromJsonAsync<PictureResponse>($"https://localhost:44318/api/PictureDescription/{file.PictureId}");
            fileList.Add(fileOb);
        }
        scaleImage = await Http.GetFromJsonAsync<List<ScaleImageResponse>>($"https://localhost:44318/api/PicturePayload/scale");
        StateHasChanged();
    }

    private async Task ShowChangeModal(PictureResponse file)
    {
        var tmpFile= await GetFileObject(file.Id);
        this.file = tmpFile;
        await modalChangeRef.Show();
    }

    private Task ShowModalDel(PictureResponse file)
    {
        this.file = file;
        return modalDelRef.Show();
    }

    private async Task HideModalDel()
    {
        await modalDelRef.Hide();
        //this.file = new FileResponse();
        StateHasChanged();
    }

    private async Task DeleteFile()
    {
        await Http.DeleteAsync($"https://localhost:44318/api/PictureDescription/{file.Id}");
        await Http.DeleteAsync($"https://localhost:5001/api/DocumentPictures/{IdDocument}/{file.Id}");
    
        var doc = await Http.GetFromJsonAsync<Document>($"https://localhost:5001/api/DocumentPictures/{IdDocument}");
        fileList.Clear();
        foreach (var file in doc.Pictures)
        {
            var fileOb = await Http.GetFromJsonAsync<PictureResponse>($"https://localhost:44318/api/PictureDescription/{file.PictureId}");
            fileList.Add(fileOb);
        }
        scaleImage = await Http.GetFromJsonAsync<List<ScaleImageResponse>>($"https://localhost:44318/api/PicturePayload/scale");
        HideModalDel();
        StateHasChanged();
    }

    private async Task OnInputFileObjectChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 1024 * 100;

        foreach (var file in e.GetMultipleFiles(1))
        {
            using var fileContent = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();
            await fileContent.CopyToAsync(ms);

            if (payloadFile == null)
            {
                throw new Exception("Mutable object not found");
            }
            payloadFile = new PictureObjectResponse(file.Name, ms.ToArray(), file.ContentType);
        }
    }

    private async Task<PictureResponse> GetFileObject(Guid Id)
    {
        var file = await Http.GetFromJsonAsync<PictureResponse>($"https://localhost:44318/api/PictureDescription/{Id}");
        file.PictureObject = await Http.GetFromJsonAsync<PictureObjectResponse>($"https://localhost:44318/api/PicturePayload/picture/{Id}");
        return file;
    }
}

